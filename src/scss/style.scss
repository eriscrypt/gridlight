@import './_vars.scss';
@import './_normalize.scss';
@import './mixins';
@import './utils';

/* Containers */
.container {
  margin: 0 auto;
  max-width: $grid-xl;

  &-fluid {
    margin: 0;
    max-width: 100%;
  }

  &-wide {
    margin: 0 auto;
    max-width: $max-container-width;
  }
}
/* End */

/* Rows & Cols */
.row {
  display: flex;
  flex-wrap: wrap;
  width: 100%;

  .col {
    display: flex;
    flex-grow: 1;

    &-auto {
      flex: unset;
      flex-basis: unset;
      display: flex;
    }
  }
}
/* End */

.align {
  &-center {
    align-items: center;
  }
  &-start {
    align-items: flex-start;
  }
  &-end {
    align-items: flex-end;
  }
}

.justify {
  &-center {
    justify-content: center;
  }
  &-start {
    justify-content: flex-start;
  }
  &-end {
    justify-content: flex-end;
  }
  &-between {
    justify-content: space-between;
  }
  &-around {
    justify-content: space-around;
  }
}

/*
  $direction = ('top', 'bottom', 'left', 'right')
  $directionKey = ('t', 'b', 'l', 'r')
*/
@include create-color();

@each $modifier, $breakpoint in $map-grid-props {
  @include create-mq($breakpoint) {
    @include create-col-classes($modifier, $grid-cols);
    @include create-gap-classes($modifier, $breakpoint);

    @each $direction, $directionKey in $map-offset-props {
      @include create-offset-classes($modifier, '.p', 'padding', $direction, $directionKey);
      @include create-offset-classes($modifier, '.m', 'margin', $direction, $directionKey);
    }

    @each $prefix, $prefixValue in $map-display-props {
      @include create-display-classes($modifier, $prefixValue);
    }
  }
}
/* End */

.cursor {
  &-pointer {
    cursor: pointer;
  }
  &-default {
    cursor: default;
  }
}

input,
button {
  border: none;
  outline: none;
}

button {
  cursor: pointer;
}
